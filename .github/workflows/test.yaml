name: "Test"

on:
  push:
    paths:
      - "src/"
      - "tests/"
      - ".github/workflows/test.yaml"
  pull_request:

jobs:
  tox:
    name: "üêç Tox (Python ${{ matrix.python-version }}, ${{ matrix.os }})"
    timeout-minutes: 10
    strategy:
      matrix:
        python-version:
          - '3.11'
          - 'pypy3.11'
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: macos-latest
            python-version: 'pypy3.11'
          - os: windows-latest
            python-version: 'pypy3.11'
          - os: ubuntu-latest
            python-version: 'pypy3.11'
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry install
      - run: python3 -m pip install --upgrade pip
      - run: python3 -m pip install tox-gh
      - run: poetry run tox run -m tests -vv --notest
      - run: poetry run tox run -m tests --skip-pkg-install
  coverage:
    name: "üìä Coverage (Python ${{ matrix.python-version }}, ${{ matrix.os }})"
    needs: tox
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: [ '3.11' ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry install --with dev
      - run: poetry run coverage run -m unittest discover tests
      - run: poetry run coverage report -m
      - run: poetry run coverage xml
      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
