name: "prerelease"

on:
  push:
    tags:
      - "0.*.*"
      - "*.*.*a*"
      - "*.*.*b*"
      - "*.*.*rc*"


jobs:
  build:
    name: "ðŸ“¦ Build (Python ${{ matrix.python-version }}, ${{ matrix.os }})"
    timeout-minutes: 10
    strategy:
      matrix:
        python-version:
          - '3.11'
        os: [ ubuntu-20.04, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - uses: actions/cache@v3
        with:
          path: .nox
          key: build-${{ runner.os }}-python${{ matrix.python-version }}-nox-${{ hashFiles('**/noxfile.py', '**/pyproject.toml', '**/poetry.lock') }}
      - run: poetry install --with dev,bin
      - run: poetry run nox -R --session build
      - name: "Set platform name"
        run: |
          OS_NAME="${{ matrix.os }}"
          PLATFORM_NAME="${OS_NAME/-*/}"
          PLATFORM_NAME="${PLATFORM_NAME/windows/win}"
          PLATFORM_NAME="${PLATFORM_NAME/macos/mac}"
          PLATFORM_NAME="${PLATFORM_NAME/ubuntu/linux}"
          echo "PLATFORM_NAME=$PLATFORM_NAME" >> $GITHUB_ENV
          echo "$PLATFORM_NAME"
      - name: "Rename artifact"
        run: |
            mv dist/pyggp pyggp-${{ env.PLATFORM_NAME }}
            ls -lah pyggp-*
      - uses: actions/upload-artifact@v3
        with:
          name: "binaries"
          path: "pyggp-*"
          if-no-files-found: error
  sanity_check:
    name: "ðŸ”¬ Sanity Check (${{ matrix.os }})"
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-20.04, macos-12, macos-11, windows-2022, windows-2019 ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: "Set platform name"
        run: |
          OS_NAME="${{ matrix.os }}"
          PLATFORM_NAME="${OS_NAME/-*/}"
          PLATFORM_NAME="${PLATFORM_NAME/windows/win}"
          PLATFORM_NAME="${PLATFORM_NAME/macos/mac}"
          PLATFORM_NAME="${PLATFORM_NAME/ubuntu/linux}"
          echo "PLATFORM_NAME=$PLATFORM_NAME" >> $GITHUB_ENV
          echo "$PLATFORM_NAME"
      - uses: actions/download-artifact@v3
        with:
          name: "binaries"
      - run: chmod +x pyggp-*
      - run: |
            ./pyggp-${{ env.PLATFORM_NAME }} --sys-info
            ./pyggp-${{ env.PLATFORM_NAME }} match nim first=Arbitrary second=Arbitrary
            ./pyggp-${{ env.PLATFORM_NAME }} match tic-tac-toe o=Arbitrary x=Arbitrary
            ./pyggp-${{ env.PLATFORM_NAME }} match rock-paper-scissors left=Arbitrary right=Arbitrary
            ./pyggp-${{ env.PLATFORM_NAME }} match minipoker bluffer=Arbitrary caller=Arbitrary
        if: runner.os != 'Windows'
      - run: |
             ./pyggp-${{ env.PLATFORM_NAME }}.exe --sys-info
             ./pyggp-${{ env.PLATFORM_NAME }}.exe match nim first=Arbitrary second=Arbitrary
             ./pyggp-${{ env.PLATFORM_NAME }}.exe match tic-tac-toe o=Arbitrary x=Arbitrary
             ./pyggp-${{ env.PLATFORM_NAME }}.exe match rock-paper-scissors left=Arbitrary right=Arbitrary
             ./pyggp-${{ env.PLATFORM_NAME }}.exe match minipoker bluffer=Arbitrary caller=Arbitrary
        if: runner.os == 'Windows'
  pypi:
    name: "ðŸ“¤ Upload to Test PyPI"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs:
      - build
      - sanity_check
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - uses: actions/cache@v3
        with:
          path: .nox
          key: test-pypi-${{ runner.os }}-python${{ matrix.python-version }}-nox-${{ hashFiles('**/noxfile.py', '**/pyproject.toml', '**/poetry.lock') }}
      - run: poetry install --with dev,bin
      - uses: JRubics/poetry-publish@v1.16
        with:
            pypi_token: ${{ secrets.TEST_PYPI_TOKEN }}
            repository_name: "testpypi"
            repository_url: "https://test.pypi.org/legacy/"
  gh-release:
    name: "ðŸŽ‰ GitHub Prerelease"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build
      - sanity_check
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: "binaries"
      - uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            pyggp-*
