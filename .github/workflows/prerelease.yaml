name: "prerelease"

on:
  push:
    tags:
      - "0.*.*"
      - "*.*.*a*"
      - "*.*.*b*"
      - "*.*.*rc*"


jobs:
  build:
    name: "ðŸ“¦ Build (Python ${{ matrix.python-version }}, ${{ matrix.os }})"
    timeout-minutes: 10
    strategy:
      matrix:
        python-version:
          - '3.12'
        os: [ ubuntu-24.04, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - uses: actions/cache@v4
        with:
          path: .nox
          key: ${{ github.ref_name }}-${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-python${{ matrix.python-version }}-.nox-${{ hashFiles('**/noxfile.py', '**/pyproject.toml', '**/poetry.lock') }}
      - run: poetry install --with dev,bin
      - run: poetry run nox -R --session build
      - name: "Set platform name"
        run: |
          OS_NAME="${{ matrix.os }}"
          echo "OS_NAME=$OS_NAME"
          PLATFORM_NAME="${OS_NAME/-*/}"
          PLATFORM_NAME="${PLATFORM_NAME/windows/win}"
          PLATFORM_NAME="${PLATFORM_NAME/macos/mac}"
          PLATFORM_NAME="${PLATFORM_NAME/ubuntu/linux}"
          echo "PLATFORM_NAME=$PLATFORM_NAME" >> $GITHUB_ENV
          echo "PLATFORM_NAME=$PLATFORM_NAME"
      - name: "Rename artifact"
        run: mv dist/pyggp pyggp-${{ env.PLATFORM_NAME }}
      - run: ls -lah pyggp-*
      - uses: actions/upload-artifact@v4
        with:
          name: "binaries"
          path: "pyggp-*"
          if-no-files-found: error
  sanity_check:
    name: "ðŸ”¬ Sanity Check (${{ matrix.os }})"
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ ubuntu-24.04, ubuntu-22.04, ubuntu-20.04, macos-15, macos-14, macos-13, windows-2025, windows-2022, windows-2019]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    needs: build
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: "Set platform name"
        run: |
          OS_NAME="${{ matrix.os }}"
          echo "OS_NAME=$OS_NAME"
          PLATFORM_NAME="${OS_NAME/-*/}"
          PLATFORM_NAME="${PLATFORM_NAME/windows/win}"
          PLATFORM_NAME="${PLATFORM_NAME/macos/mac}"
          PLATFORM_NAME="${PLATFORM_NAME/ubuntu/linux}"
          echo "PLATFORM_NAME=$PLATFORM_NAME"
          POSTFIX=$PLATFORM_NAME
          POSTFIX="${POSTFIX/win/.exe}"
          POSTFIX="${POSTFIX%mac}"
          POSTFIX="${POSTFIX%linux}"
          echo "POSTFIX=$POSTFIX"
          echo "PLATFORM_NAME=$PLATFORM_NAME" >> $GITHUB_ENV
          echo "POSTFIX=$POSTFIX" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: "binaries"
      - run: ls -lah pyggp-*
      - run: chmod +x pyggp-*
      - run: |
          ./pyggp-${{ env.PLATFORM_NAME }}${{ env.POSTFIX }} --sys-info
          ./pyggp-${{ env.PLATFORM_NAME }}${{ env.POSTFIX }} match --ruleset nim first=Arbitrary second=Arbitrary
          ./pyggp-${{ env.PLATFORM_NAME }}${{ env.POSTFIX }} match --ruleset tic-tac-toe o=Arbitrary x=Arbitrary
          ./pyggp-${{ env.PLATFORM_NAME }}${{ env.POSTFIX }} match --ruleset rock-paper-scissors left=Arbitrary right=Arbitrary
          ./pyggp-${{ env.PLATFORM_NAME }}${{ env.POSTFIX }} match --ruleset minipoker bluffer=Arbitrary caller=Arbitrary
  pypi:
    name: "ðŸ“¤ Upload to Test PyPI"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs:
      - build
      - sanity_check
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v4
      - run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - uses: actions/cache@v4
        with:
          path: .nox
          key: ${{ github.ref_name }}-${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-python${{ matrix.python-version }}-.nox-${{ hashFiles('**/noxfile.py', '**/pyproject.toml', '**/poetry.lock') }}
      - run: poetry install --with dev,bin
      - uses: JRubics/poetry-publish@v2.1
        with:
          pypi_token: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_name: "testpypi"
          repository_url: "https://test.pypi.org/legacy/"
  gh-release:
    name: "ðŸŽ‰ GitHub Prerelease"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build
      - sanity_check
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: "binaries"
      - uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            pyggp-*
