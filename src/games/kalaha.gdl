houses(6).
stones(6).

role(north).
role(south).

init(control(north)).
init(store(north,0)).
init(store(south,0)).
init(house(Role,House,Stones)) :- house(Role, House), stones(Stones).

house(Role, House) :- role(Role), houses(Houses), succ(Houses, HousesSucc), lt(0, House), lt(House, HousesSucc).
store(Store) :- houses(Houses), succ(Houses, Store).
lap(L) :- houses(Houses), times(2,Houses,L1), succ(L1,L).

dom(A) :- succ(A,_).

succ(0,1). succ(1,2). succ(2,3). succ(3,4). succ(4,5). succ(5,6). succ(6,7). succ(7,8). succ(8,9). succ(9,10).
succ(10,11). succ(11,12). succ(12,13). succ(13,14). succ(14,15). succ(15,16). succ(16,17). succ(17,18). succ(18,19).
succ(19,20). succ(20,21). succ(21,22). succ(22,23). succ(23,24). succ(24,25). succ(25,26). succ(26,27). succ(27,28).
succ(28,29). succ(29,30). succ(30,31). succ(31,32). succ(32,33). succ(33,34). succ(34,35). succ(35,36). succ(36,37).

lt(N,M) :- succ(N,M).
lt(N,O) :- succ(N,M), lt(M,O).

plus(0,0,0).
plus(1,0,1).
plus(0,1,1).
plus(A,B,S) :- succ(A1,A), succ(S1,S), plus(A1,B,S1).
plus(A,B,S) :- succ(B1,B), succ(S1,S), plus(A,B1,S1).
plus(A,B,S) :- plus(B,A,S).

times(0,B,0) :- dom(B).
times(A,0,0) :- dom(A).
times(1,B,B) :- dom(B).
times(A,1,A) :- dom(A).
times(A,B,S) :- succ(A1,A), plus(B,S1,S), times(A1,B,S1).
times(A,B,S) :- succ(B1,B), plus(A,S1,S), times(A,B1,S1).
times(A,B,S) :- times(B,A,S).

div(A,1,A) :- dom(A).
div(A,A,1) :- dom(A).
div(A,B,0) :- lt(A,B).
div(A,B,Q) :- lt(B,A), plus(A1, B, A), succ(Q1,Q), div(A1,B,Q1).
div(A,B,Q) :- times(B,Q,A).
div(A,B,Q) :- times(Q,B,A).

distance(Role, House, D) :-
    role(Role), house(Role, House), store(Store),
    plus(House, D, Store).

distance(Role, House1, Role, House2, D) :-
    role(Role), house(Role, House1), house(Role, House2), distinct(House1, House2),
    plus(House1, D, House2).

distance(Role, House, Role, House, L) :-
    role(Role), house(Role, House),
    lap(L).

distance(Role1, H, Role2, 1, 2) :-
    role(Role1), houses(H), house(Role, House), role(Role2), distinct(Role1, Role2).

distance(Role1, House1, Role3, House3, D) :-
    role(Role1), house(Role1, House1), role(Role2), house(Role2, House2), role(Role3), house(Role3, House3),
    lap(L), lt(L, MaxD),
    distance(Role1, House1, Role2, House2, D1),
    distance(Role2, House2, Role3, House3, D2),
    plus(D1, D2, D),
    lt(E, D),
    lt(D, MaxD),
    not distance(Role1, House1, Role3, House3, E).

opposite(Role1, House1, Role2, House2) :-
    role(Role1), house(Role1, House1), role(Role2), house(Role2, House2), distinct(Role1, Role2),
    houses(Houses),
    plus(House1, House2, Houses).

next(control(Role2)) :-
    role(Role2), role(Role1), distinct(Role1,Role2),
    true(control(Role1)),
    open(Role2),
    not move_again.

next(control(Role)) :-
    role(Role),
    true(control(Role)),
    open(Role),
    move_again.

open(Role) :-
    role(Role), lt(0, Stones),
    true(house(Role,House,Stones)).

move_again :-
    role(Role), house(Role, House),
    lap(L), plus(M, D, S), times(L, F, M),
    distance(Role, House, D),
    true(house(Role, House, S)),
    does(Role,House).

next(house(Role,House,After)) :-
    role(Role), house(Role,House),
    plus(N,Taken,Before), plus(N,Added,After),
    true(house(Role,House,Before)),
    added(Role,House,Added),
    taken(Role,House,Taken).

added(Role1,Sink,0) :-
    role(Role1), house(Role,Sink), role(Role2), house(Role,Source),
    lt(S, D),
    true(house(Role2,Source,S)),
    distance(Role2,Source,Role1,Sink,D),
    does(Role2,Source).

added(Role1,Sink,N) :-
    role(Role1), house(Role1,Sink), role(Role2), house(Role2,Source),
    not lt(S, D),
    lap(L), plus(M, D, S), div(M, L, Q), succ(Q, N),
    true(house(Role2,Source,S)),
    distance(Role2,Source,Role1,Sink,D),
    does(Role2,Source).

taken(Role,Source,0) :-
    role(Role), house(Role,Source),
    not does(Role,Source).

taken(Role,Source,Stones) :-
    role(Role), house(Role,Source),
    true(house(Role,Source,Stones)),
    does(Role,Source).

taken(Role2,OppositeHouse,0) :-
    role(Role2), house(Role2, OppositeHouse), role(Role1), house(Role1, Source), distinct(Role1,Role2),
    house(Role1, Target), distance(Role1, Source, Role1, Target, Stones),
    not opposite(Role1, Target, Role2, OppositeHouse),
    does(Role1,Source).

taken(Role2,OppositeHouse,0) :-
    role(Role2), house(Role2, OppositeHouse), role(Role1), house(Role1, Source), distinct(Role1,Role2),
    house(Role1, Target), distance(Role1, Source, Role1, Target, Stones),
    opposite(Role1, Target, Role2, OppositeHouse),
    true(house(Role1,Source,Stones)),
    not true(house(Role1,Target,0)),
    does(Role1,Source).

taken(Role2,OppositeHouse,OppositeStones) :-
    role(Role2), house(Role2, OppositeHouse), role(Role1), house(Role1, Source), distinct(Role1,Role2),
    house(Role1, Target), distance(Role1, Source, Role1, Target, Stones),
    opposite(Role1, Target, Role2, OppositeHouse),
    true(house(Role1,Source,Stones)),
    true(house(Role2,OppositeHouse,OppositeStones)),
    true(house(Role1,Target,0)),
    does(Role1,Source).




next(store(Role,StonesN)) :-
    role(Role),
    plus(Stones0,N,StonesN),
    true(store(Role,Stones0)),
    targeted(Role,N).

targeted(Role2,0) :-
    role(Role1), role(Role2), distinct(Role1,Role2),
    does(Role1,_Source).

targeted(Role,0) :-
    role(Role), house(Role, Source),
    lt(S, D),
    true(house(Role,Source,S)),
    distance(Role,Source,D),
    does(Role,Source).

targeted(Role,N) :-
    role(Role), house(Role, Source),
    not lt(S, D),
    lap(L), plus(M, D, S), div(M, L, Q), succ(Q, N),
    true(house(Role,Source,S)),
    distance(Role,Source,D),
    does(Role,Source).

legal(Role, House) :-
    role(Role), house(Role, House),
    not true(house(Role,House,0)).

goal(Role,Stones) :-
    role(Role),
    true(store(Role,Stones)).

terminal :-
    role(Role1), role(Role2), distinct(Role1,Role2),
    not true(control(Role2)),
    not open(Role1).
