
role(first).
role(second).

init(control(first)).
init(control(second)).

succ(0,1). succ(1,2). succ(2,3). succ(3,4). succ(4,5).
succ(5,6). succ(6,7). succ(7,8). succ(8,9). succ(9,10).

ship_length(carrier,5).
ship_length(battleship,4).
ship_length(cruiser,3).
ship_length(submarine,3).
ship_length(destroyer,2).

ship(Ship) :- ship_length(Ship,_Length).

row(1). row(2). row(3).
row(4). row(5). row(6).
row(7). row(8). row(9). row(10).

col(1). col(2). col(3).
col(4). col(5). col(6).
col(7). col(8). col(9). col(10).

direction(horizontal).
direction(vertical).

next(shot(Role, Col, Row)) :-
    role(Role), col(Col), row(Row),
    true(shot(Role, Col, Row)).

next(shot(Role2, Col, Row)) :-
    role(Role2), col(Col), row(Row),
    role(Role1), distinct(Role1, Role2),
    does(Role1, shoot(Col, Row)).

next(control(Role)) :-
    role(Role).

next(occupies(Role, Col, Row, Ship)) :-
    role(Role), col(Col), row(Row), ship(Ship),
    set(Role, Col, Row, Ship, _Length, _Direction).

next(occupies(Role, Col, Row, Ship)) :-
    role(Role), col(Col), row(Row), ship(Ship),
    true(occupies(Role, Col, Row, Ship)).

next(hit(Role2, Col, Row)) :-
    role(Role2), col(Col), row(Row),
    role(Role1), distinct(Role1, Role2),
    true(occupies(Role2, Col, Row, _Ship)),
    does(Role1, shoot(Col, Row)).

next(hit(Role, Col, Row)) :-
    role(Role), col(Col), row(Row),
    true(hit(Role, Col, Row)).

set(Role, Col, Row, Ship, Length, Direction) :-
    role(Role), col(Col), row(Row), ship_length(Ship, Length1), direction(Direction),
    set_phase(Ship),
    succ(Length, Length1),
    does(Role, place(Col, Row, Direction)).

set(Role, Col, Row1, Ship, Length, vertical) :-
    role(Role), col(Col), row(Row1), ship(Ship),
    row(Row),
    succ(Row, Row1), succ(Length, Length1),
    set(Role, Col, Row, Ship, Length1, vertical).

set(Role, Col1, Row, Ship, Length, horizontal) :-
    role(Role), col(Col1), row(Row), ship(Ship),
    col(Col),
    succ(Col, Col1), succ(Length, Length1),
    set(Role, Col, Row, Ship, Length1, horizontal).

set_phase(carrier) :-
    not true(occupies(_Role, _Col, _Row, carrier)).

set_phase(battleship) :-
    not set_phase(carrier),
    not true(occupies(_Role, _Col, _Row, battleship)).

set_phase(cruiser) :-
    not set_phase(carrier),
    not set_phase(battleship),
    not true(occupies(_Role, _Col, _Row, cruiser)).

set_phase(submarine) :-
    not set_phase(carrier),
    not set_phase(battleship),
    not set_phase(cruiser),
    not true(occupies(_Role, _Col, _Row, submarine)).

set_phase(destroyer) :-
    not set_phase(carrier),
    not set_phase(battleship),
    not set_phase(cruiser),
    not set_phase(submarine),
    not true(occupies(_Role, _Col, _Row, destroyer)).

set_phase :- set_phase(_Ship).
hit_phase :- not set_phase.

sees(Everyone, control(Role)) :-
    role(Everyone), role(Role),
    true(control(Role)).

sees(Role, occupies(Role, Col, Row, Ship)) :-
    role(Role), col(Col), row(Row), ship(Ship),
    true(occupies(Role, Col, Row, Ship)).

sees(Everyone, shot(Role, Col, Row)) :-
    role(Everyone), role(Role), col(Col), row(Row),
    true(shot(Role, Col, Row)).

sees(Everyone, hit(Role, Col, Row)) :-
    role(Everyone), role(Role), col(Col), row(Row),
    true(hit(Role, Col, Row)).

sees(Everyone, occupies(Role, Col, Row, Ship)) :-
    role(Everyone), role(Role), col(Col), row(Row), ship(Ship),
    true(occupies(Role, Col, Row, Ship)),
    destroyed(Role, Ship).

legal(Role, place(Col, Row, Direction)) :-
    role(Role), col(Col), row(Row),  direction(Direction),
    ship_length(Ship, Length), set_phase(Ship),
    not forbidden(Role, Col, Row, Direction, Length).

legal(Role2, shoot(Col, Row)) :-
    role(Role2), col(Col), row(Row),
    role(Role1), distinct(Role1, Role2),
    hit_phase,
    not true(shot(Role1, Col, Row)).

forbidden(Role, Col, Row, Direction, 1) :-
    role(Role), col(Col), row(Row), direction(Direction),
    true(occupies(Role, Col, Row, _Ship)).

forbidden(Role, 10, Row, horizontal, 2) :-
    role(Role), row(Row).

forbidden(Role, Col, 10, vertical, 2) :-
    role(Role), col(Col).

forbidden(Role, Col, Row, Direction, Length1) :-
    role(Role), col(Col), row(Row), direction(Direction),
    succ(Length, Length1),
    forbidden(Role, Col, Row, Direction, Length).

forbidden(Role, Col, Row, horizontal, Length1) :-
    role(Role), col(Col), row(Row),
    col(Col1),
    succ(Col, Col1), succ(Length, Length1),
    forbidden(Role, Col1, Row, horizontal, Length).

forbidden(Role, Col, Row, vertical, Length1) :-
    role(Role), col(Col), row(Row),
    row(Row1),
    succ(Row, Row1), succ(Length, Length1),
    forbidden(Role, Col, Row1, vertical, Length).

goal(Role1, 0) :-
    role(Role1), role(Role2), distinct(Role1, Role2),
    destroyed(Role1),
    not destroyed(Role2).

goal(Role1, 50) :-
    role(Role1), role(Role2), distinct(Role1, Role2),
    destroyed(Role1),
    destroyed(Role2).

goal(Role1, 100) :-
    role(Role1), role(Role2), distinct(Role1, Role2),
    not destroyed(Role1),
    destroyed(Role2).

terminal :- destroyed.

destroyed :- destroyed(_Role).

destroyed(Role) :-
    role(Role),
    destroyed(Role, carrier),
    destroyed(Role, battleship),
    destroyed(Role, cruiser),
    destroyed(Role, submarine),
    destroyed(Role, destroyer).

destroyed(Role, Ship) :-
    role(Role), ship(Ship),
    hit_phase,
    not alive(Role, Ship).

alive(Role, Ship) :-
    role(Role), ship(Ship),
    col(Col), row(Row),
    true(occupies(Role, Col, Row, Ship)),
    not true(shot(Role, Col, Row)).
