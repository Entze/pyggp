
role(north).
role(south).

houses(6).
stones(6).

house(House) :-
    houses(Houses),
    suc(Houses,Houses1), lt(0, House), lt(House, Houses1).

dom(D) :- suc(D,_E).
dom(D) :- suc(_E,D).

suc(0,1). suc(1,2). suc(2,3). suc(3,4). suc(4,5). suc(5,6). suc(6,7). suc(7,8). suc(8,9). suc(9,10). suc(10,11).
suc(11,12). suc(12,13). suc(13,14). suc(14,15). suc(15,16). suc(16,17). suc(17,18). suc(18,19). suc(19,20). suc(20,21).
suc(21,22). suc(22,23). suc(23,24). suc(24,25). suc(25,26). suc(26,27). suc(27,28). suc(28,29). suc(29,30). suc(30,31).
suc(31,32). suc(32,33). suc(33,34). suc(34,35). suc(35,36). suc(36,37). suc(37,38). suc(38,39). suc(39,40). suc(40,41).
suc(41,42). suc(42,43). suc(43,44). suc(44,45). suc(45,46). suc(46,47). suc(47,48). suc(48,49). suc(49,50). suc(50,51).
suc(51,52). suc(52,53). suc(53,54). suc(54,55). suc(55,56). suc(56,57). suc(57,58). suc(58,59). suc(59,60). suc(60,61).
suc(61,62). suc(62,63). suc(63,64). suc(64,65). suc(65,66). suc(66,67). suc(67,68). suc(68,69). suc(69,70). suc(70,71).
suc(71,72).

lt(A,B) :- suc(A,B).
lt(A,C) :- suc(A,B), lt(B,C).

plus(0,B,B) :- dom(B).
plus(1,B,S) :- suc(B,S).
plus(A1,B,S1) :- suc(A,A1), suc(S,S1), plus(A,B,S).
plus(A,B,S) :- plus(B,A,S).

div(A,13,0) :- lt(A, 13).
div(A,13,D1) :- plus(N,13,A), suc(D,D1), div(N,13,D).
mod(A,13,A) :- lt(A, 13).
mod(A,13,M) :- plus(M,13,A), lt(M, 13).
mod(A,13,M) :- plus(M1,13,A), mod(M1,13,M).

init(control(north)).
init(store(Role,0)) :- role(Role).
init(house(Role,House,Stones)) :-
    role(Role), house(House), stones(Stones).


next(house(Role,House,StonesN)) :-
    role(Role), house(House),
    suc(Stones, Stones1), plus(Stones1, N, StonesN), distinct(0, Stones), distinct(Source, House),
    reaches(Role, House, _Left),
    lapped(N),
    true(house(Role,House,Stones)),
    does(Role,Source).
next(house(Role,House,1)) :-
    role(Role), house(House),
    lt(0, Left),
    true(house(Role,House,0)),
    reaches(Role, House, Left).
next(house(Role,Source,N)) :-
    role(Role), house(Source),
    not reaches(Role, Source, 0),
    lapped(N).

reaches(Role, House, Stones) :-
    role(Role), house(House),
    suc(Stones, StonesMod), mod(Stones1, 13, StonesMod),
    true(house(Role,Source,Stones1)),
    does(Role,Source).
reaches(Role, House, Stones) :-
    role(Role), house(House),
    suc(Stones, Stones1),
    reaches(Role, House, Stones1).
reaches(Role, store, Stones) :-
    role(Role),
    suc(Stones, StonesMod), mod(Stones1, 13, StonesMod),
    true(house(Role,Source,Stones1)),
    does(Role,Source).
reaches(Role, store, Stones) :-
    role(Role), house(House),
    houses(House), suc(Stones, Stones1),
    reaches(Role, House, Stones1).
reaches(Role2, 1, Stones) :-
    role(Role2), role(Role1), distinct(Role1, Role2),
    suc(Stones, Stones1),
    reaches(Role1, store, Stones1).


lapped(N) :-
    role(Role), house(Source),
    div(Stones, 13, N),
    true(house(Role,Source,Stones)),
    does(Role, Source).


legal(Role, House) :-
    role(Role), house(House),
    not true(house(Role,House,0)).
