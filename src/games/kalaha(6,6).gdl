role(north).
role(south).

houses(6).
stones(6).

house(House) :-
    houses(Houses),
    suc(Houses,Houses1), lt(0, House), lt(House, Houses1).

after(Role1, (Role2, House), (Role2, House1)) :-
    role(Role1), role(Role2), house(House), house(House1),
    suc(House, House1).

after(Role, (Role, House), (Role, store)) :-
    role(Role), house(House), houses(House).

after(Role1, (Role1, store), (Role2, 1)) :-
    role(Role1), role(Role2), distinct(Role1, Role2).

after(Role1, (Role2, House), (Role1, 1)) :-
    role(Role1), role(Role2), house(House), houses(House), distinct(Role1, Role2).

dom(D) :- suc(D,_E).
dom(D) :- suc(_C,D).

suc(0,1). suc(1,2). suc(2,3). suc(3,4). suc(4,5). suc(5,6). suc(6,7). suc(7,8). suc(8,9). suc(9,10). suc(10,11).
suc(11,12). suc(12,13). suc(13,14). suc(14,15). suc(15,16). suc(16,17). suc(17,18). suc(18,19). suc(19,20). suc(20,21).
suc(21,22). suc(22,23). suc(23,24). suc(24,25). suc(25,26). suc(26,27). suc(27,28). suc(28,29). suc(29,30). suc(30,31).
suc(31,32). suc(32,33). suc(33,34). suc(34,35). suc(35,36). suc(36,37). suc(37,38). suc(38,39). suc(39,40). suc(40,41).
suc(41,42). suc(42,43). suc(43,44). suc(44,45). suc(45,46). suc(46,47). suc(47,48). suc(48,49). suc(49,50). suc(50,51).
suc(51,52). suc(52,53). suc(53,54). suc(54,55). suc(55,56). suc(56,57). suc(57,58). suc(58,59). suc(59,60). suc(60,61).
suc(61,62). suc(62,63). suc(63,64). suc(64,65). suc(65,66). suc(66,67). suc(67,68). suc(68,69). suc(69,70). suc(70,71).
suc(71,72).

lt(A,B) :- suc(A,B).
lt(A,C) :- suc(A,B), lt(B,C).

plus(0,B,B) :- dom(B).
plus(1,B,S) :- suc(B,S).
plus(A1,B,S1) :- suc(A,A1), suc(S,S1), plus(A,B,S).
plus(A,B,S) :- plus(B,A,S).

div(A,13,0) :- lt(A, 13).
div(A,13,D1) :- plus(N,13,A), suc(D,D1), div(N,13,D).
mod(A,13,A) :- lt(A, 13).
mod(A,13,M) :- plus(M,13,A), lt(M, 13).
mod(A,13,M) :- plus(M1,13,A), mod(M1,13,M).

init(control(north)).
init(store(Role,0)) :- role(Role).
init(house(Role,House,Stones)) :-
    role(Role), house(House), stones(Stones).


next(control(Role2)) :-
    role(Role2), role(Role1), distinct(Role1, Role2),
    true(control(Role1)),
    open(Role2),
    not move_again.

next(control(Role2)) :-
    role(Role2), role(Role1), distinct(Role1,Role2),
    true(control(Role1)),
    filled(Role2),
    not move_again.

filled(Role) :-
    role(Role),
    not captures(_Role,_House1),
    reaches(Role,_House2,_Left).

filled(Role) :-
    role(Role), house(House),house(OtherHouse), distinct(House,OtherHouse),
    not captures(_Role,_House,Role,House),
    reaches(Role, OtherHouse, _Left).

filled(Role) :-
    role(Role), not lapped(0).

next(control(Role)) :-
    role(Role),
    true(control(Role)),
    not sweep,
    move_again.

move_again :-
    role(Role),
    reaches(Role,store,0),
    does(Role,_House).

open(Role) :-
    role(Role), house(House),
    not true(house(Role,House,0)).

next(house(Role, House, StonesN)) :-
    role(Role), house(House),
    not captures(Role, House), not sweep, lapped(N),
    suc(Stones, Stones1), plus(Stones1, N, StonesN),
    reaches(Role, House, _Left),
    true(house(Role,House,Stones)).

next(house(Role, House, StonesN)) :-
    role(Role), house(House),
    not captures(Role, House), not sweep,
    lapped(N), plus(Stones, N, StonesN),
    not reaches(Role, House, _Left),
    true(house(Role,House,Stones)),
    not does(Role,House).

next(house(Role, House, N)) :-
    role(Role), house(House),
    not captures(Role, House), not sweep,
    lapped(N),
    not reaches(Role, House, _Left),
    does(Role,House).

next(store(Role, StonesN)) :-
    role(Role),
    not captures(_Role,_House), not sweep,
    lapped(N), suc(Stones, Stones1), plus(Stones1, N, StonesN),
    reaches(Role, store, _Left),
    true(store(Role,Stones)).

next(store(Role, StonesN)) :-
    role(Role),
    not captures(_Role, _House1), not sweep,
    lapped(N), plus(Stones, N, StonesN),
    not reaches(Role, store, _Left),
    true(store(Role, Stones)),
    does(Role, _House2).

next(store(Role2, Stones)) :-
    role(Role2), role(Role1), distinct(Role1, Role2),
    not captures(_Role,_House1), not sweep,
    true(store(Role,Stones)),
    does(Role1, _House2).

reaches(Role, Source1, Stones) :-
    role(Role), house(Source),
    after(Role, (Role, Source), (Role, Source1)),
    suc(Stones, StonesMod), mod(Stones1, 13, StonesMod),
    true(house(Role,Source,Stones1)),
    does(Role,Source).
reaches(Role1, Target, Stones) :-
    role(Role1), role(Role2), role(Role),
    suc(Stones, Stones1),
    after(Role, (Role2, Source), (Role1, Target)),
    reaches(Role2, Source, Stones1),
    does(Role,_House).
lapped(N) :-
    role(Role), house(House),
    div(Stones,13,N),
    true(house(Role,House,Stones)),
    does(Role, House).


captures(Role, House) :- captures(Role, House, _Role, _House).
captures(Role, House) :- captures(_Role, _House, Role, House).

captures(Role1, House, Role2, OppositeHouse) :-
    role(Role2), house(OppositeHouse), role(Role1), house(House), distinct(Role1, Role2), houses(Houses),
    lapped(0),
    suc(Houses, Houses1), plus(House, OppositeHouse, Houses1),
    reaches(Role1, House, 0),
    true(house(Role1,House,0)),
    does(Role1, _House).
captures(Role1, House, Role2, OppositeHouse) :-
    role(Role1), house(House), role(Role2), house(OppositeHouse), distinct(Role1, Role2), houses(Houses),
    lapped(1),
    suc(Houses, Houses1), plus(House, OppositeHouse, Houses1),
    true(house(Role1,House,13)),
    does(Role1, House).

next(house(Role, House, 0)) :-
    role(Role), house(House),
    captures(Role, House).


next(store(Role, StonesN)) :-
    role(Role), house(House), role(Role2), house(OppositeHouse),
    captures(Role, House, Role2, OppositeHouse), not sweep, lapped(N),
    suc(OppositeHouseStones, Captured), suc(N, ToStore), plus(Captured, ToStore, StonesN),
    reaches(Role, store, _Left1),
    not reaches(Role2, OppositeHouse, _Left2),
    true(house(Role2,OppositeHouse,OppositeHouseStones)),
    true(store(Role,Stones)).

next(store(Role, StonesN)) :-
    role(Role), house(House), role(Role2), house(OppositeHouse),
    captures(Role, House, Role2, OppositeHouse), not sweep, lapped(N),
    suc(N, ToOppositeHouse), plus(OppositeHouseStones, ToOppositeHouse, FromOppositeHouse), suc(FromOppositeHouse, Captured), suc(N, ToStore), plus(Captured, ToStore, StonesN),
    reaches(Role, store, _Left1),
    reaches(Role2, OppositeHouse, _Left2),
    true(house(Role2,OppositeHouse,OppositeHouseStones)),
    true(store(Role,Stones)).

next(store(Role, StonesN)) :-
    role(Role), house(House), role(Role2), house(OppositeHouse),
    captures(Role, House, Role2, OppositeHouse), not sweep, lapped(0),
    suc(OppositeHouseStones, Captured), plus(Stones, Captured, StonesN),
    not reaches(Role, store, _Left1),
    not reaches(Role2, OppositeHouse, _Left2),
    true(house(Role2,OppositeHouse,OppositeHouseStones)),
    true(store(Role,Stones)).

next(store(Role, StonesN)) :-
    role(Role), house(House), role(Role2), house(OppositeHouse),
    captures(Role, House, Role2, OppositeHouse), not sweep, lapped(N), distinct(0, N),
    plus(OppositeHouseStones,2, Captured), plus(N, Captured, StonesN),
    not reaches(Role, store, _Left1),
    not reaches(Role2, OppositeHouse, _Left2),
    true(house(Role2,OppositeHouse,OppositeHouseStones)),
    true(store(Role,Stones)).


next(store(Role2, Stones)) :-
    role(Role2), role(Role1), house(House), distinct(Role1,Role2),
    captures(Role1, House, _,_),
    true(store(Role2,Stones)).

in_play(Role, 1, Stones) :-
    role(Role),
    true(house(Role, 1, Stones)).

in_play(Role, House1, InPlay) :-
    role(Role), house(House1), house(House),
    suc(House, House1), plus(Stones, Prev, InPlay),
    in_play(Role, House, Prev),
    true(house(Role, House1, Stones)).

in_play(Role, InPlay) :-
    role(Role), house(House),
    houses(House),
    in_play(Role, House, InPlay).

sweep :-
    role(Role), house(House), houses(House),
    move_again, lapped(0),
    in_play(Role, Stones),
    true(house(Role,House,Stones)),
    does(Role, House).

sweep :-
    role(Role), house(House), house(OtherHouse), distinct(House, OtherHouse),
    captures(_Role, _House, Role, House), lapped(0),
    not reaches(Role, OtherHouse, _Left),
    in_play(Role, Stones),
    true(house(Role,House,Stones)).

sweep :-
    role(Role1), role(Role2), distinct(Role1, Role2),
    lapped(0),
    not move_again,
    not open(Role2),
    not reaches(Role2, _, _),
    true(control(Role1)).

next(house(Role, House, 0)) :-
    role(Role), house(House),
    sweep.

next(store(Role, Stones)) :-
    role(Role),
    sweep, not captures(_Role,_House),
    plus(Prev, InPlay, Stones),
    in_play(Role, InPlay),
    true(store(Role,Prev)).

next(store(Role, Stones)) :-
    role(Role), house(House),
    sweep, captures(Role,House,Role2,OppositeHouse),
    plus(Prev, StonesN, Stones), plus(InPlay, OppositeHouseStones, StonesN),
    in_play(Role, InPlay),
    true(house(Role2,OppositeHouse,OppositeHouseStones)),
    true(store(Role,Prev)).

next(store(Role, Stones)) :-
    role(Role), house(House),
    sweep, captures(_Role,_House,Role,House),
    plus(Left, HouseStones, InPlay), plus(Prev, Left, Stones),
    in_play(Role, InPlay),
    true(house(Role,House,HouseStones)),
    true(store(Role,Prev)).


legal(Role, House) :-
    role(Role), house(House),
    not true(house(Role,House,0)).

goal(Role, Stones) :-
    role(Role),
    true(store(Role,Stones)).

terminal :-
    not open(north),
    not open(south).
