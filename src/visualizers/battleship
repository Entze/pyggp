
__rowheight(1).
__colwidth(3).

__ship_letter(carrier, "A").
__ship_letter(battleship, "B").
__ship_letter(cruiser, "C").
__ship_letter(submarine, "S").
__ship_letter(destroyer, "D").


__cols(C) :- C = #count { C' : col(C') }.
__rows(R) :- R = #count { R' : row(R') }.

__mapping(a, 1).
__mapping(1, 1).
__mapping(S, N) :- succ(S', S), __mapping(S', N'), N = N' + 1.

__cell_col_letter_offset(N) :- __colwidth(CW), N = CW / 2.
__cell_col_border_offset(CW) :- __colwidth(CW).
__cell_col_whitespace_offset(W) :-__colwidth(CW),
    __cell_col_letter_offset(LO),
    __cell_col_border_offset(BO),
    W = 0..CW, W != LO, W != BO.

__cell_row_letter_offset(N) :- __rowheight(RH), N = RH / 2.
__cell_row_border_offset(RH) :- __rowheight(RH).
__cell_row_whitespace_offset(W) :- __rowheight(RH),
    __cell_row_letter_offset(LO),
    __cell_row_border_offset(BO),
    W = 0..RH, W != LO, W != BO.

__row_legend_str_width(1) :- __rows(R), 0 <= R < 10.
__row_legend_str_width(2) :- __rows(R), 10 <= R < 100.
__row_legend_str_width(3) :- __rows(R), 100 <= R < 1000.

__row_legend_str_horizontal_offset(1).
__row_legend_whitespace_horizontal_offset(0).
__row_legend_whitespace_horizontal_offset(SO + SW) :-
    __row_legend_str_horizontal_offset(SO),
    __row_legend_str_width(SW).

__row_legend_str_vertical_offset(N) :- __rowheight(RH), N = RH / 2.
__row_legend_whitespace_vertical_offset(N) :-
    __rowheight(RH),
    __row_legend_str_vertical_offset(VO),
    N = 0..RH, N != VO.

__row_legend_width(LSW + 2) :- __row_legend_str_width(LSW).

__role_offset(left, 0).
__role_offset(right, Cs * (CW + 1) + LW + 1) :- __cols(Cs), __colwidth(CW), __row_legend_width(LW).

__viz(0, Offset, "┏") :-
    __role_offset(Role, Offset).

__viz(0, CC, "━") :-
    col(C),
    __mapping(C, C'),
    __role_offset(Role, Offset),
    Wall=0..(CW-1), __colwidth(CW),
    CC = 1 + (C'-1) * (CW + 1) + Wall + Offset.

__viz(0, CC, "┯") :-
    col(C),
    not lastcol(C),
    __mapping(C, C'),
    __role_offset(Role, Offset),
    __colwidth(CW),
    __cell_col_border_offset(CBO),
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(0, CC, "┓") :-
    lastcol(LC),
    __mapping(LC, LC'),
    __role_offset(Role, Offset),
    __colwidth(CW),
    __cell_col_border_offset(CBO),
    CC = 1 + (LC'-1) * (CW + 1) + CBO + Offset.


__viz(RC, CC, "┃") :-
    row(R),
    __mapping(R, R'),
    __role_offset(Role, Offset),
    __rowheight(RH),
    Wall=0..(RH-1),
    RC = 1 + (R'-1) * (RH + 1) + Wall,
    CC = Offset.

__viz(RC, CC, "┠") :-
    row(R), firstcol(FC),
    not lastrow(R),
     __mapping(R, R'), __mapping(FC, FC'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = Offset.

__viz(RC, CC, "┗") :-
    lastrow(R), firstcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = Offset.

__viz(RC, CC, "┃") :-
    row(R), lastcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_col_border_offset(CBO),
    Wall=0..(RH-1),
    RC = 1 + (R'-1) * (RH + 1) + Wall,
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "┨") :-
    row(R), lastcol(LC),
    not lastrow(R),
    __mapping(R, R'), __mapping(LC, LC'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO), __cell_col_border_offset(CBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (LC'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "┛") :-
    lastrow(R), lastcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO), __cell_col_border_offset(CBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "━") :-
    lastrow(R), col(C),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_row_border_offset(RBO),
    Wall=0..(CW-1),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (C'-1) * (CW + 1) + Wall + Offset.

__viz(RC, CC, "┷") :-
    lastrow(R), col(C),
    not lastcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_row_border_offset(RBO), __cell_col_border_offset(CBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "│") :-
    row(R), col(C),
    not lastcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_col_border_offset(CBO),
    Wall=0..(RH-1),
    RC = 1 + (R'-1) * (RH + 1) + Wall,
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "┼") :-
    row(R), col(C),
    not lastrow(R), not lastcol(C),
    __mapping(R, R'), __mapping(C, C'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO), __cell_col_border_offset(CBO),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (C'-1) * (CW + 1) + CBO + Offset.

__viz(RC, CC, "─") :-
    row(R), col(C),
    not lastrow(R),
    __mapping(R, R'), __mapping(C, C'),
    __rowheight(RH), __colwidth(CW),
    __role_offset(Role, Offset),
    __cell_row_border_offset(RBO),
    Wall=0..(CW-1),
    RC = 1 + (R'-1) * (RH + 1) + RBO,
    CC = 1 + (C'-1) * (CW + 1) + Wall + Offset.

__viz(RC, CC, " ") :-
    cell((C, R)),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_col_whitespace_offset(CWO), __cell_row_letter_offset(RLO),
    RC = 1 + (R'-1) * (RH + 1) + RLO,
    CC = 1 + (C'-1) * (CW + 1) + CWO + Offset.

__viz(RC, CC, " ") :-
    cell(Cell),
    Cell=(C, R),
    not true(occupies(Role, Cell, _)),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_col_letter_offset(CLO), __cell_row_letter_offset(RWO),
    RC = 1 + (R'-1) * (RH + 1) + RWO,
    CC = 1 + (C'-1) * (CW + 1) + CLO + Offset.

__viz(RC, CC, L) :-
    cell(Cell),
    Cell=(C, R),
    true(occupies(Role, Cell, Ship)),
    __mapping(R, R'), __mapping(C, C'),
    __role_offset(Role, Offset),
    __rowheight(RH), __colwidth(CW),
    __cell_col_letter_offset(CLO), __cell_row_letter_offset(RWO),
    __ship_letter(Ship, L),
    RC = 1 + (R'-1) * (RH + 1) + RWO,
    CC = 1 + (C'-1) * (CW + 1) + CLO + Offset.
