
__max_col(C) :- C = #max { C': col(C') }.
__max_row(R) :- R = #max { R': row(R') }.

__offset(first, 0).
__offset(second, O) :- __max_col(C), O=4*(C+1) + 3.

__legend_row(-1).
__legend_row(R') :- __max_row(R), R'=R*2+1.
__viz(LR, -2, "") :- __max_row(R), R < 10, __legend_row(LR).
__viz(LR, -2, " ") :- __max_row(R), R >= 10, __legend_row(LR).
__viz(LR, -1, " ") :- __legend_row(LR).
__viz(LR,  0, " ") :- __legend_row(LR).

% TODO

__viz(LR, C' + O, " ") :-
    __legend_row(LR), col(C),
    C'=(C-1)*4+1, __offset(Role, O).
__viz(LR, C' + 1 + O, " ") :-
    __legend_row(LR), col(C),
    C'=(C-1)*4+1, __offset(Role, O).
__viz(LR, C' + 2 + O, C) :-
    __legend_row(LR), col(C),
    C'=(C-1)*4+1, __offset(Role, O).
__viz(LR, C' + 3 + O, " ") :-
    __legend_row(LR), col(C), C < 10,
    C'=(C-1)*4+1, __offset(Role, O).
__viz(LR, C' + 3 + O, "") :-
    __legend_row(LR), col(C), C >= 10,
    C'=(C-1)*4+1, __offset(Role, O).

__seperator_row(0).
__seperator_row(N*2) :- row(N).
__viz(SR, 0, "   +---+---+---+---+---+---+---+---+---+---+   +---+---+---+---+---+---+---+---+---+---+") :-
    __seperator_row(SR).



__viz(N', W, " ") :- __legend_whitespace_col(W), N = 0..8, N'=N*2+1.
__legend_whitespace_col(-3).
__legend_whitespace_col(44).
__legend_whitespace_col(88).
__viz(N', 88, " ") :- N=9, N'=N*2+1.

__viz(N', X, N+1) :- __legend_num_col(X), N = 0..9, N'=N*2+1.
__legend_num_col(-2).
__legend_num_col(45).
__legend_num_col(89).

__viz(N', S, " |") :- __legend_sep_col(S), N = 0..9, N'=N*2+1.
__legend_sep_col(-1).
__legend_sep_col(46).



__viz(R', C' + O + 3, "|") :-
    role(Role), col(C), row(R),
    __offset(Role, O),
    C'=(C-1)*4+1, R'=(R-1)*2+1.


__viz(R', C' + I + O, " ") :-
    role(Role), col(C), row(R),
    __offset(Role, O), __shot_indicator_offset(I),
    C'=(C-1)*4+1, R'=(R-1)*2+1,
    not true(shot(Role, C, R)).

__viz(R', C' + I + O, "-") :-
    role(Role), col(C), row(R),
    __offset(Role, O), __shot_indicator_offset(I),
    C'=(C-1)*4+1, R'=(R-1)*2+1,
    true(shot(Role, C, R)).

__shot_indicator_offset(0).
__shot_indicator_offset(2).

__viz(R', C' + 1 + O, " ") :-
    role(Role), col(C), row(R),
    __offset(Role, O),
    C'=(C-1)*4+1, R'=(R-1)*2+1,
    not true(occupies(Role, C, R, _)).

__viz(R', C' + 1 + O, L) :-
    role(Role), col(C), row(R), ship(Ship),
    __offset(Role, O), __ship_letter(Ship, L),
    C'=(C-1)*4+1, R'=(R-1)*2+1,
    true(occupies(Role, C, R, Ship)).

__ship_letter(carrier, "A").
__ship_letter(battleship, "B").
__ship_letter(cruiser, "C").
__ship_letter(submarine, "S").
__ship_letter(destroyer, "D").
